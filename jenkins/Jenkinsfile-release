pipeline {
    agent {label 'master'}

    environment {
        SPARK_VERSION="2.2.0"
        DO_RELEASE="true"
        DO_PROMOTION="true"
        BRANCH_DIR="/builds2/sparkling-water/${BRANCH_NAME}"
        BUILD_NUMBER_DIR="${BRANCH_DIR}/${BUILD_NUMBER}"
        LOG_FILE="${BUILD_NUMBER_DIR}/log.txt"
        SPARK_HOME="${env.WORKSPACE}/spark"
        JAVA_HOME="${JAVA_HOME_8}"
        PATH="${JAVA_HOME_8}/bin:${PATH}"
        ZERO_BASED_BUILD_NUMBER="true"
    }

    stages {
        stage('Download Spark') {
            steps {
                sh """
                    # Download Spark
                    wget -q "http://d3kbcqa49mib13.cloudfront.net/spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz"
                    mkdir -p "${env.SPARK_HOME}"
                    tar zxvf spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz -C "${env.SPARK_HOME}" --strip-components 1
                    rm -rf spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz
               """
            }
        }

        stage('Prepare Environment') {
            steps {
                sh """
                    # Log commands.
                    set -x
                    # Stop on error.
                    set -e
                    
                    # Transform build number to start with 0
                    if [ -n "$ZERO_BASED_BUILD_NUMBER" ]; then
                        BUILD_NUMBER="\$(( $BUILD_NUMBER - 1 ))"
                    fi
                    
                    mkdir -p ${BUILD_NUMBER_DIR}
                    # Do everything in the job directory.  Ignore the standard jenkins workspace.
                    cd ${BUILD_NUMBER_DIR}

                    # Log some stuff for debug purposes.
                    date
                    pwd
                    env
                    echo $PATH
                    which java
                    java -version
                  
                    """
            }
        }
        stage('Clone the repo'){
            steps{
                dir("${env.BUILD_NUMBER_DIR}") {
                    checkout scm

                    sh 'du -h'

                    sh """

                        # Update the build number
                        mkdir -p ci
                        echo "BUILD_NUMBER=${BUILD_NUMBER}" > ci/buildnumber.properties
                        echo "BUILD_BRANCH_NAME=${BRANCH_NAME}" > ci/git.properties
                        echo "BUILD_HASH=\$(git rev-parse --verify HEAD)" >> ci/git.properties
                        echo "BUILD_HASH_SHORT=\$(git describe --always)" >> ci/git.properties

                        echo
                        echo "BUILD PROPERTIES"
                        echo
                        
                        echo "ci/buildnumber.properties"
                        cat ci/buildnumber.properties
                        
                        echo "ci/git.properties"
                        cat ci/git.properties
                        
                        # Log some git stuff for debug purposes.
                       
                        """
                }
            }
        }

        stage('Build Sparkling Water'){
            steps{
                dir("${env.BUILD_NUMBER_DIR}"){
                    sh """
                        # Update gradle build number
                        sed -i.backup -E "s/\\.[0-9]+-SNAPSHOT/.$BUILD_NUMBER/" gradle.properties
                        REL_VERSION=\$( cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//" )
                        NEXT_BUILD_NUMBER=\$(( $BUILD_NUMBER + 1 ))
                        NEW_VERSION=\$( echo "\$REL_VERSION" | sed -E "s/\\.[0-9]+\$/.\${NEXT_BUILD_NUMBER}-SNAPSHOT/" )
                        echo "org.gradle.jvmargs=-XX:MaxPermSize=512m -Xmx1024m" >> gradle.properties
                        echo 
                        echo "gradle.properties"
                        cat gradle.properties
                        echo
                        echo "RELEASE VERSION: \$REL_VERSION"
                        echo "NEW VERSION: \$NEW_VERSION"
                        echo
                        
                        # Fetch H2O python package
                        mkdir -p private/
                        curl \$(./gradlew -q printH2OWheelPackage) > private/h2o.whl
                        export H2O_PYTHON_WHEEL="\$(pwd)/private/h2o.whl"
                        
                        # Perform a build
                        ./gradlew build -x check 
                        ./gradlew buildSparklingWaterDist
                        if [ "$DO_RELEASE" = "true" ]; then
                           git checkout -- gradle.properties
                           if [ "$DO_PROMOTION" == "true" ]; then
                             DO_PROMOTION="-PdoPromotion"
                           else 
                             DO_PROMOTION=""
                           fi
                          ./gradlew $DO_PROMOTION -PdoRelease -Pgradle.release.useAutomaticVersion=true -PreleaseVersion="$REL_VERSION" -PnewVersion="$NEW_VERSION" release -x check && git push
                        fi
                        """
                }
            }
        }
    }
}