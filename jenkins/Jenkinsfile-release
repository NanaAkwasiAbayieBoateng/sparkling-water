pipeline {
    agent {label 'master'}

    environment {
        SPARK_VERSION="2.2.0"
        DO_RELEASE="true"
        DO_PROMOTION="true"
        BRANCH_DIR="/builds2/sparkling-water/${BRANCH_NAME}"
        BUILD_NUMBER_DIR="${BRANCH_DIR}/${BUILD_NUMBER}"
        LOG_FILE="${BUILD_NUMBER_DIR}/log.txt"
        SPARK_HOME="${env.WORKSPACE}/spark"
        JAVA_HOME="${JAVA_HOME_8}"
        PATH="${JAVA_HOME_8}/bin:${PATH}"
        ZERO_BASED_BUILD_NUMBER="true"
    }

    stages {
        stage('Download Spark') {
            steps {
                sh """
                    # Download Spark
                    wget -q "http://d3kbcqa49mib13.cloudfront.net/spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz"
                    mkdir -p "${env.SPARK_HOME}"
                    tar zxvf spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz -C "${env.SPARK_HOME}" --strip-components 1
                    rm -rf spark-${env.SPARK_VERSION}-bin-hadoop2.7.tgz
               """
            }
        }

        stage('Prepare Environment') {
            steps {
                sh """
                    # Transform build number to start with 0
                    if [ -n "$ZERO_BASED_BUILD_NUMBER" ]; then
                        BUILD_NUMBER="\$(( $BUILD_NUMBER - 1 ))"
                    fi
                    
                    mkdir -p ${BUILD_NUMBER_DIR}
                    # Do everything in the job directory.  Ignore the standard jenkins workspace.
                    cd ${BUILD_NUMBER_DIR}

                    # Log some stuff for debug purposes.
                    date
                    pwd
                    env
                    echo $PATH
                    which java
                    java -version
                  
                    """
            }
        }
        stage('Clone the repo'){
            steps{
                dir("${env.BUILD_NUMBER_DIR}") {
                    checkout scm

                    sh """

                        # Update the build number
                        mkdir -p ci
                        echo "BUILD_NUMBER=${BUILD_NUMBER}" > ci/buildnumber.properties
                        echo "BUILD_BRANCH_NAME=${BRANCH_NAME}" > ci/git.properties
                        echo "BUILD_HASH=\$(git rev-parse --verify HEAD)" >> ci/git.properties
                        echo "BUILD_HASH_SHORT=\$(git describe --always)" >> ci/git.properties

                        echo
                        echo "BUILD PROPERTIES"
                        echo
                        
                        echo "ci/buildnumber.properties"
                        cat ci/buildnumber.properties
                        
                        echo "ci/git.properties"
                        cat ci/git.properties
     
                        """
                }
            }
        }

        stage('Build Sparkling Water'){
            steps{
                dir("${env.BUILD_NUMBER_DIR}") {
                    script {
                        sh """
                        # Update gradle build number
                        sed -i.backup -E "s/\\.[0-9]+-SNAPSHOT/.$BUILD_NUMBER/" gradle.properties
                        REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`
                        NEXT_BUILD_NUMBER=`( $BUILD_NUMBER + 1 )`
                        NEW_VERSION=`echo "\$REL_VERSION" | sed -E "s/\\.[0-9]+\$/.\${NEXT_BUILD_NUMBER}-SNAPSHOT/"`
                        echo "org.gradle.jvmargs=-XX:MaxPermSize=512m -Xmx1024m" >> gradle.properties
                        echo 
                        echo "gradle.properties"
                        cat gradle.properties
                        echo
                        echo "RELEASE VERSION: \${REL_VERSION}"
                        echo "NEW VERSION: \${NEW_VERSION}"
                        echo
                        
                        # Fetch H2O python package
                        mkdir -p private/
                        curl \$(./gradlew -q printH2OWheelPackage) > private/h2o.whl
                        export H2O_PYTHON_WHEEL="\$(pwd)/private/h2o.whl"
                        
                        # Perform a build
                        ./gradlew build -x check 
                        ./gradlew buildSparklingWaterDist
                        if [ "$DO_RELEASE" = "true" ]; then
                           git checkout -- gradle.properties
                           if [ "$DO_PROMOTION" == "true" ]; then
                             DO_PROMOTION="-PdoPromotion"
                           else 
                             DO_PROMOTION=""
                           fi
                         # ./gradlew $DO_PROMOTION -PdoRelease -Pgradle.release.useAutomaticVersion=true -PreleaseVersion="\$REL_VERSION" -PnewVersion="\$NEW_VERSION" release -x check && git push
                        fi
                        """

                        def tmpdir = "./buildsparklingwater.tmp"
                        sh """

                    # Create h2o extended jar for all supported hadoop distributions
                    HADOOP_DISTRIBUTIONS=`./gradlew -q :sparkling-water-assembly-h2o:printHadoopDistributions)`
                    for distro in \${HADOOP_DISTRIBUTIONS}
                    do
                      ./gradlew extendJar -PdownloadH2O="\${distro}"
                    done
                    # Create extended jar also for the regular h2o ( no h2o driver )
                    ./gradlew extendJar -PdownloadH2O

                    # Publish the output to S3.
                    echo
                    echo PUBLISH
                    echo
                    s3cmd --rexclude='target/classes/*' --acl-public sync ${
                            env.WORKSPACE
                        }/dist/build/ s3://h2o-release/sparkling-water/${BRANCH_NAME}/${BUILD_NUMBER}/
                    
                    echo EXPLICITLY SET MIME TYPES AS NEEDED
                    list_of_html_files=`find dist/build -name '*.html' | sed 's/dist\\/build\\///g'`
                    echo \${list_of_html_files}
                    for f in \${list_of_html_files}
                    do
                        s3cmd --acl-public --mime-type text/html put dist/build/\${f} s3://h2o-release/sparkling-water/${
                            BRANCH_NAME
                        }/${BUILD_NUMBER}/\${f}
                    done
                    
                    list_of_js_files=`find dist/build -name '*.js' | sed 's/dist\\/build\\///g'`
                    echo \${list_of_js_files}
                    for f in \${list_of_js_files}
                    do
                        s3cmd --acl-public --mime-type text/javascript put dist/build/\${f} s3://h2o-release/sparkling-water/\${BRANCH_NAME}/\${BUILD_NUMBER}/\${f}
                    done
                    
                    list_of_css_files=`find dist/build -name '*.css' | sed 's/dist\\/build\\///g'`
                    echo \${list_of_css_files}
                    for f in \${list_of_css_files}
                    do
                        s3cmd --acl-public --mime-type text/css put dist/build/\${f} s3://h2o-release/sparkling-water/${
                            BRANCH_NAME
                        }/${BUILD_NUMBER}/\${f}
                    done
                    
                    list_of_extended_jars=`find assembly-h2o/private -name '*-extended.jar' | sed 's/assembly-h2o\\/private\\///g'`
                    echo \${list_of_extended_jars}
                    for jar in \${list_of_extended_jars}
                    do
                         s3cmd --acl-public put assembly-h2o/private/\${jar} s3://h2o-release/sparkling-water/${
                            BRANCH_NAME
                        }/${BUILD_NUMBER}/\${jar}
                    done
                    ./gradlew :sparkling-water-assembly-h2o:clean
                    ./gradlew :sparkling-water-assembly-h2o:cleanH2OJars
                    
                    echo UPDATE LATEST POINTER
                    tmpdir=./buildsparklingwater.tmp
                    mkdir -p ${tmpdir}
                    echo ${BUILD_NUMBER} > ${tmpdir}/latest
                    echo "<head>" > ${tmpdir}/latest.html
                    echo "<meta http-equiv=\\"refresh\\" content=\\"0; url=${BUILD_NUMBER}/index.html\\" />" >> ${
                            tmpdir
                        }/latest.html
                    echo "</head>" >> ${tmpdir}/latest.html
                    s3cmd --acl-public put ${tmpdir}/latest s3://h2o-release/sparkling-water/${BRANCH_NAME}/latest
                    s3cmd --acl-public put ${tmpdir}/latest.html s3://h2o-release/sparkling-water/${BRANCH_NAME}/latest.html
                    s3cmd --acl-public put ${tmpdir}/latest.html s3://h2o-release/sparkling-water/${BRANCH_NAME}/index.html
                    
                     
                    """
                    }

                }
            }
        }


        stage('Publish To PyPi') {
            steps {
                dir("${env.BUILD_NUMBER_DIR}/py/build/pkg") {
                    withCredentials([usernamePassword(credentialsId: "pypi-credentials", usernameVariable: 'PIPY_USERNAME', passwordVariable: 'PIPY_PASSWORD')]) {
                        sh  """
                                # python setup.py sdist
                                # twine -u $PIPY_USERNAME -p $PIPY_PASSWORD upload dist/*
                            """
                    }
                }
            }
        }

        stage('Update Pointer to the last Release'){
            steps {
                dir("${env.BRANCH_DIR}") {
                    sh  """
                            # rm -f lastSuccessfulBuild
                            # ln -s ${BUILD_NUMBER} lastSuccessfulBuild
                        """
                }
            }
        }


    }
}